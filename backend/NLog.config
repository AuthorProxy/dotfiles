<?xml version="1.0" encoding="utf-8" ?>
<!-- nlog can include
      <targets />     - defines log targets/outputs
      <rules />       - defines log routing rules
      <extensions />  - loads NLog extensions from the *.dll file
      <include />     - includes external configuration file
      <variable />    - sets the value of a configuration variable
      http://nlog-project.org/wiki/Configuration_file#Configuration_file_format
-->
<!-- nlog attributes
      autoReload="true"                 - NLog monitor logging configuration files and relative included configs as well and re-read them each time they are modified.
      throwExceptions="true"            - adding the throwExceptions attribute in the config file causes NLog to stop masking exceptions and pass them to the calling application instead. This attribute is useful at deployment time to quickly locate any problems. It’s recommended to set throwExceptions to "false" as soon as the application is properly configured to run, so that any accidental logging problems won’t crash the application.
      internalLogFile="file.txt"        - adding internalLogFile causes NLog to write its internal debugging messages to the specified file. This includes any exceptions that may be thrown during logging.
      internalLogLevel="Fatal"          - determines the internal log level. The higher the level, the less verbose the internal log output.
      internalLogToConsole="true"       - determines whether internal logging messages are sent to the console.
      internalLogToConsoleError="true"  - determines whether internal logging messages are sent to the console error output (stderr).
      http://nlog-project.org/wiki/Configuration_file#Troubleshooting_logging
      http://nlog-project.org/wiki/Configuration_file#Automatic_reconfiguration
-->
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

  <!-- Include files http://nlog-project.org/wiki/Configuration_file#Include_files -->
  <!--<include file="${basedir}/${machinename}.config"/>-->

  <extensions>
    <add assembly="CustomLocalHostTarget" />
  </extensions>

  <!-- Variables http://nlog-project.org/wiki/Configuration_file#Variables -->
  <variable name="logDirectory" value="${basedir}/logs/${shortdate}"/>

  <!-- Targets http://nlog-project.org/wiki/Configuration_file#Targets -->
  <targets>
    <!-- You can attach any default target as output
          AspNetTrace         - Writes log messages to the ASP.NET trace.
          AspResponse         - Outputs log messages through the ASP Response object.
          Chainsaw            - Sends log messages to the remote instance of Chainsaw application from log4j.
          ColoredConsole      - Writes log messages to the console with customizable coloring.
          Console             - Writes log messages to the console.
          Database            - Writes log messages to the database using an ADO.NET provider.
          Debug               - Mock target - useful for testing.
          Debugger            - Writes log messages to the attached managed debugger.
          EventLog            - Writes log message to the Event Log.
          File                - Writes log messages to one or more files.
          FormControl         - Logs text to Windows.Forms.Control.Text property control of specified Name.
          LogReceiverService  - Sends log messages to a NLog Receiver Service (using WCF or Web Services).
          Mail                - Sends log messages by email using SMTP protocol.
          Memory              - Writes log messages to an ArrayList in memory for programmatic retrieval.
          MessageBox          - Pops up log messages as message boxes.
          MethodCall          - Calls the specified static method on each log message and passes contextual parameters to it.
          MSMQ                - Writes log message to the specified message queue handled by MSMQ.
          Network             - Sends log messages over the network.
          NLogViewer          - Sends log messages to the remote instance of NLog Viewer.
          Null                - Discards log messages. Used mainly for debugging and benchmarking.
          OutputDebugString   - Outputs log messages through the OutputDebugString() Win32 API.
          PerfCounter         - Increments specified performance counter on each write.
          RichTextBox         - Log text a Rich Text Box control in an existing or new form.
          Trace               - Sends log messages through System.Diagnostics.Trace.
          WebService          - Calls the specified web service on each log message.
          http://nlog-project.org/wiki/Targets#Supported_Targets
    -->
    <!-- You can wrap any of your targets with any of this wrapper
          AspNetBufferingWrapper  - Buffers log events for the duration of ASP.NET request and sends them down to the wrapped target at the end of a request.
          AsyncWrapper            - Provides asynchronous, buffered execution of target writes.
          AutoFlushWrapper        - Causes a flush after each write on a wrapped target.
          BufferingWrapper        - A target that buffers log events and sends them in batches to the wrapped target.
          FallbackGroup           - Provides fallback-on-error.
          FilteringWrapper        - Filters log entries based on a condition.
          ImpersonatingWrapper    - Impersonates another user for the duration of the write.
          PostFilteringWrapper    - Filters buffered log entries based on a set of conditions that are evaluated on a group of events.
          RandomizeGroup          - Sends log messages to a randomly selected target.
          RepeatingWrapper        - Repeats each log event the specified number of times.
          RetryingWrapper         - Retries in case of write error.
          RoundRobinGroup         - Distributes log events to targets in a round-robin fashion.
          SplitGroup              - Writes log events to all targets.
          http://nlog-project.org/wiki/Targets#Wrapper_Targets
          http://nlog-project.org/wiki/Configuration_file#Asynchronous_processing_and_wrapper_targets
    -->
    <!-- You can define your own targets/
         Here "host" property overrides the public property "Host" in CustomLocalHostTarget.MyLocalHostTarget class
         http://nlog-project.org/wiki/Targets#Custom_Targets 
         http://nlog-project.org/wiki/How_to_write_a_Target
    -->
    <target name="console" xsi:type="ColoredConsole" layout="${date:format=yyyy-MM-dd HH\:mm\:ss} ${message}" />

    <target name="asyncFile" xsi:type="AsyncWrapper">
      <target name="logfile" xsi:type="File" fileName="file.md" deleteOldFileOnStartup="true" />
    </target>

    <target name="localHost" type="MyCustomLocalHostTarget" host="myCustomString" />

    <!-- Any of this options can be used as "layout"  for "target layout" property.
         Also it's available wrapper layouts and custom layouts: http://nlog-project.org/wiki/Layout_Renderers
          ${asp-application}      - ASP Application variable.
          ${aspnet-application}   - ASP.NET Application variable.
          ${aspnet-request}       - ASP.NET Request variable.
          ${aspnet-session}       - ASP.NET Session variable.
          ${aspnet-sessionid}     - ASP.NET Session ID.
          ${aspnet-user-authtype} - ASP.NET User variable.
          ${aspnet-user-identity} - ASP.NET User variable.
          ${asp-request}          - ASP Request variable.
          ${asp-session}          - ASP Session variable.
          ${basedir}              - The current application domain's base directory.
          ${callsite}             - The call site (class name, method name and source information).
          ${counter}              - A counter value (increases on each layout rendering).
          ${date}                 - Current date and time.
          ${document-uri}         - URI of the HTML page which hosts the current Silverlight application.
          ${environment}          - The environment variable.
          ${event-context}        - Log event context data.
          ${exception}            - Exception information provided through a call to one of the Logger.*Exception() methods.
          ${file-contents}        - Renders contents of the specified file.
          ${gc}                   - The information about the garbage collector.
          ${gdc}                  - Global Diagnostics Context item. Provided for compatibility with log4net.
          ${guid}                 - Globally-unique identifier (GUID).
          ${identity}             - Thread identity information (name and authentication information).
          ${install-context}      - Installation parameter (passed to InstallNLogConfig).
          ${level}                - The log level.
          ${literal}              - A string literal.
          ${log4jxmlevent}        - XML event description compatible with log4j, Chainsaw and NLogViewer.
          ${logger}               - The logger name.
          ${longdate}             - The date and time in a long, sortable format yyyy-MM-dd HH:mm:ss.mmm.
          ${machinename}          - The machine name that the process is running on.
          ${mdc}                  - Mapped Diagnostic Context item. Provided for compatibility with log4net.
          ${message}              - The formatted log message.
          ${ndc}                  - Nested Diagnostic Context item. Provided for compatibility with log4net.
          ${newline}              - A newline literal.
          ${nlogdir}              - The directory where NLog.dll is located.
          ${performancecounter}   - The performance counter.
          ${processid}            - The identifier of the current process.
          ${processinfo}          - The information about the running process.
          ${processname}          - The name of the current process.
          ${processtime}          - The process time in format HH:mm:ss.mmm.
          ${qpc}                  - High precision timer, based on the value returned from QueryPerformanceCounter() optionally converted to seconds.
          ${registry}             - A value from the Registry.
          ${shortdate}            - The short date in a sortable format yyyy-MM-dd.
          ${sl-appinfo}           - Information about Silverlight application.
          ${specialfolder}        - System special folder path (includes My Documents, My Music, Program Files, Desktop, and more).
          ${stacktrace}           - Stack trace renderer.
          ${tempdir}              - A temporary directory.
          ${threadid}             - The identifier of the current thread.
          ${threadname}           - The name of the current thread.
          ${ticks}                - The Ticks value of current date and time.
          ${time}                 - The time in a 24-hour, sortable format HH:mm:ss.mmm.
          ${windows-identity}     - Thread Windows identity information (username).
    -->
    <!--<target name="console" xsi:type="ColoredConsole" layout="${shortdate}|${level:uppercase=true}|${logger}|${message}"/>-->
  </targets>
  <targets>
    <!-- Default wrappers http://nlog-project.org/wiki/Configuration_file#Default_wrappers -->
    <default-wrapper xsi:type="BufferingWrapper" bufferSize="100"/>
    <default-wrapper xsi:type="AsyncWrapper">
      <wrapper-target xsi:type="RetryingWrapper"/>
    </default-wrapper>

    <!-- Default target parameters http://nlog-project.org/wiki/Configuration_file#Default_target_parameters -->
    <default-target-parameters xsi:type="File" keepFileOpen="false" createDirs="true" />

    <!--
          CsvLayout                 - A specialized layout that renders CSV-formatted events.
          LayoutWithHeaderAndFooter - A specialized layout that supports header and footer.
          Log4JXmlEventLayout       - A specialized layout that renders Log4j-compatible XML events.
          SimpleLayout              - Represents a string with embedded placeholders that can render contextual information.
          http://nlog-project.org/wiki/SimpleLayout
          http://nlog-project.org/wiki/CsvLayout
          http://nlog-project.org/wiki/LayoutWithHeaderAndFooter
          http://nlog-project.org/wiki/Log4JXmlEventLayout
    -->
    <target name="logCSV" xsi:type="File" fileName="${logDirectory}/log.csv">
      <layout xsi:type="CsvLayout">
        <header xsi:type="SimpleLayout">
          <text>CSV Header</text>
        </header>
        <footer xsi:type="SimpleLayout">
          <text>CSV Footer</text>
        </footer>
        <quoting>All</quoting>
        <quoteChar>"</quoteChar>
        <withHeader>true</withHeader>
        <delimiter>Comma</delimiter>
        <column layout="${shortdate}" name="column1"/>
        <column layout="${message}" name="column2"/>
      </layout>
    </target>
  </targets>

  <!--  name      - source/logger name (may include wildcard characters *)
        minlevel  - minimal log level for this rule to match
        maxlevel  - maximum log level for this rule to match
        level     - single log level for this rule to match
        levels    - comma separated list of log levels for this rule to match
        writeTo   - comma separated list of target that should be written to when this rule matches.
        final     - make this rule final. No further rules are processed when any final rule matches.
        http://nlog-project.org/wiki/Configuration_file#Example_rules
    -->
  <rules>
     <!--Custom localhost rule--> 
    <logger name="*" minLevel="Info" appendTo="localHost"/>

     <!--Async file rule--> 
    <logger name="*" minlevel="Trace" writeTo="asyncFile"/>

     <!--All other loggers with the same name will not be raised cause final="true"--> 
    <logger name="NLogOffDoc.Other.*" minlevel="Trace" writeTo="console" final="true" />
    <logger name="*" minlevel="Info" writeTo="console"/>

     <!--Test custom .csv layout-->
    <logger name="*" minlevel="Debug" writeTo="logCSV"/>
  </rules>
</nlog>

<!-- NLog-specific viewers
      Gibraltar (using Gibraltar Adapter for NLog) - http://nlog-project.org/2009/11/01/gibraltar-adapter-for-nlog-released.html
      Sentinel - http://sentinel.codeplex.com/
      NLogViewer - http://github.com/jkowalski/NLogViewer (functional, but no longer in development, not recommended)
     
     Log4x-compatible viewers
      Apache Chainsaw - http://logging.apache.org/chainsaw/index.html
      DevIntelligence Log4Net Viewer - http://devintelligence.com/log4netviewer/
      C# WPF Log4Net Viewer - http://www.codeproject.com/KB/cs/logviewer.aspx
      Log4Net Dashboard - http://www.l4ndash.com/
      Log4View - http://www.log4view.com/
      Log2Console - http://log2console.codeplex.com/
-->